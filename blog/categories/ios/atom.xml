<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | leenjewel Blog]]></title>
  <link href="http://leenjewel.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://leenjewel.github.io/"/>
  <updated>2018-11-28T16:16:01+08:00</updated>
  <id>http://leenjewel.github.io/</id>
  <author>
    <name><![CDATA[leenjewel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS 命令行打包并上传 TestFlight]]></title>
    <link href="http://leenjewel.github.io/blog/2018/11/28/ios-ming-ling-xing-da-bao-bing-shang-chuan-testflight/"/>
    <updated>2018-11-28T13:40:51+08:00</updated>
    <id>http://leenjewel.github.io/blog/2018/11/28/ios-ming-ling-xing-da-bao-bing-shang-chuan-testflight</id>
    <content type="html"><![CDATA[<p>网络上教大家如何用命令行的方式构建 iOS ipa 包并上传 TestFlight 的文章非常多了，最近也正好用到这些来结合 Jenkins 做持续集成。亲手实践了一把也找了很多相关的资料，发现大多成文较早，都或多或少的有些问题，所以这里也把自己最近一次实践做个总结。需要注意的点都标注上了。</p>

<h2>环境</h2>

<p>我用的基本上都是最新的 iOS 开发环境，简单罗列</p>

<ul>
<li><p>Mac OS X 10.14.1 Mojave</p></li>
<li><p>Xcode 10.1(10B61)</p></li>
<li><p>CocoaPods 1.6.0.beta.2</p></li>
</ul>


<blockquote><p><strong>这里 CocoaPods 之所以用了 Beta 版本是因为目前为止稳定版和最新的 Xcode 10 兼容性上有些问题。当然了，在更新 CocoaPods Beta 版本的时候发现 gem 命令更新针对 Mac OS X 10.14 也有了改变，具体更新 CocoaPods 的命令是：</strong></p>

<p><code>
sudo gem install -n /usr/local/bin cocoapods --pre
</code></p></blockquote>

<h2>构建 Archive</h2>

<p>先给出具体的命令</p>

<p><code>
/usr/bin/xcodebuild -scheme  -configuration Release -derivedDataPath derivedData -archivePath  -destination generic/platform=iOS clean archive
</code></p>

<p>如果你使用了 CocoaPods 做你的 iOS 工程依赖管理，那么你的 iOS 工程中会存在一个 <code>xcworkspace</code> 因此构建的命令也会稍显不一样，要增加一个参数项指定你的 <code>xcworkspace</code> 位置</p>

<p><code>
/usr/bin/xcodebuild -workspace  -scheme  -configuration Release -derivedDataPath derivedData -archivePath  -destination generic/platform=iOS clean archive
</code></p>

<h2>导出 IPA</h2>

<p>上一步构建 Archive 并不难，我自己卡在导出 IPA 包这步卡的比较久，主要是一直没有搞正确 <code>exportOptionsPlist</code> 这个 plist 文件的写法。</p>

<p>还是先给出具体的命令</p>

<p><code>
/usr/bin/xcodebuild -exportArchive -exportOptionsPlist  -archivePath  -exportPath 
</code></p>

<blockquote><p><strong>导出 ipa 包最关键的是要把 exportOptionsPlist 参数指定的 plist 文件写正确。这里有个敲门，那就是你可以先使用 Xcode 做一次 Archive 然后将构建成功的工程通过 Xcode 的 Organizer 做一次发布。当然，不要选择直接发布到 TestFlight 而是在选择 <code>Distribute App</code> 后要选择 <code>iOS App Store</code> 然后选择 <code>Export</code> 而不是 upload</strong></p></blockquote>

<p><img src="/assets/ios_command_build_ipa_upload_testflight/xcode_open_orgnaizer.png" alt="1、打开 Xcode Orgnaizer" /></p>

<p><img src="/assets/ios_command_build_ipa_upload_testflight/orgnaizer_distribute_app.png" alt="2、选择 Distribute App" /></p>

<p><img src="/assets/ios_command_build_ipa_upload_testflight/orgnaizer_ios_appstore.png" alt="3、选择 iOS App Store" /></p>

<p><img src="/assets/ios_command_build_ipa_upload_testflight/orgnaizer_export_app.png" alt="4、选择 Export" /></p>

<p><img src="/assets/ios_command_build_ipa_upload_testflight/export_options_plist.png" alt="5、得到 ExportOptions.plist 文件" /></p>

<p>在你用 Xcode 导出的可以上传到 TestFlight 的包中你可以找到一个名为 <code>ExportOptions.plist</code> 的文件。使用这个文件作为命令行导出 ipa 是 <code>exportOptionsPlist</code> 参数的文件输入就一定不会错了。</p>

<p>顺便给出我导出的这个 plist 文件的内容示意</p>

<p>```
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;UTF-8&rdquo;?>
&lt;!DOCTYPE plist PUBLIC &ldquo;&ndash;//Apple//DTD PLIST 1.0//EN&rdquo; &ldquo;<a href="http://www.apple.com/DTDs/PropertyList-1.0.dtd">http://www.apple.com/DTDs/PropertyList-1.0.dtd</a>&rdquo;>
<plist version="1.0">
<dict></p>

<pre><code>&lt;key&gt;destination&lt;/key&gt;
&lt;string&gt;export&lt;/string&gt;
&lt;key&gt;method&lt;/key&gt;
&lt;string&gt;app-store&lt;/string&gt;
&lt;key&gt;signingStyle&lt;/key&gt;
&lt;string&gt;automatic&lt;/string&gt;
&lt;key&gt;stripSwiftSymbols&lt;/key&gt;
&lt;true/&gt;
&lt;key&gt;teamID&lt;/key&gt;
&lt;string&gt;&lt;/string&gt;
&lt;key&gt;uploadBitcode&lt;/key&gt;
&lt;true/&gt;
&lt;key&gt;uploadSymbols&lt;/key&gt;
&lt;true/&gt;
</code></pre>

<p></dict>
</plist>
```</p>

<blockquote><p><code></code> 就是开发者账号里那个 10 位的 team id</p></blockquote>

<h2>关于证书</h2>

<p>构建、导出、上传 TestFlight 都需要证书这个是基本概念。这里要顺带提上一句的是证书放置的位置。在 <code>钥匙串访问</code> 程序里证书可以放置的位置有三个：</p>

<ul>
<li><p>登陆</p></li>
<li><p>本地项目</p></li>
<li><p>系统</p></li>
</ul>


<blockquote><p><strong>请将出包上传 TestFlight 用的证书放置在【登陆】这个位置，千万不要放置在【系统】中，否则每次出包系统会弹出对话框让你输入用户登录认证的用户名和密码，这样是无法做到自动化出包的。</strong></p></blockquote>

<h2>上传 TestFlight</h2>

<p>最后一步上传 TestFlight 就没什么难点了，直接给出命令</p>

<p><code>
/Applications/Xcode.app/Contents/Applications/Application Loader.app/Contents/Frameworks/ITunesSoftwareService.framework/Versions/A/Support/altool --upload-app -t ios -f  -u  -p 
</code></p>
]]></content>
  </entry>
  
</feed>
